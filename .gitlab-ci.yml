### --------------- List of tags that are used to select a runner. --------------- ###
## Обязательный блок для запуска gitlab-ci. Определяет, на каких runner-ах будет запущен CI/CD путем выбора его с помощью tag'а. ##

default:
  tags:
  - bigdata
  - dmz
  - docker

### --------------- Defines a job stage. --------------- ###
## Stage .pre выполняется перед всем остальным кодом. stage .post выполняется после всего остального кода. ##
## Так же можо задать порядок выполнения stage-ов, указав их по порядку в этом блоке. ##

stages:
#- pre-commit
- static analysis
- build
- tests
- build_docs
- artifactory
- deploy

### --------------- Include gitlab-ci-templates --------------- ###
## Добавляет в текущую конфигурацию CI\CD template's из DevOps репозитория для переиспользования. ##

include:
# VAULT
- project: DevOps/cicd-store/gitlabci/vault
  ref: v3
  file: .base_devops_get_cicd_secrets.yml

# DOCKER
- project: DevOps/cicd-store/gitlabci/docker
  ref: v6
  file:
  - .base_docker_build.yml
  - .base_docker_cleaner.yml

# PIP BUILD AND DEPLOY TO JFROG
- project: DevOps/cicd-store/gitlabci/pip
  ref: v2
  file: .base_pip_pkg_build_and_deploy_to_jfrog.yml

# Pages
- project: DevOps/cicd-store/gitlabci/pages
  ref: v1
  file: .base_pages_deploy_sphinx.yml

# Artifactory
- project: DevOps/cicd-store/gitlabci/artifactory
  ref: v3
  file:
  - .base_rt_upload.yml
  - .base_rt_cli.yml

### --------------- Workflow rules --------------- ###
workflow:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: never
  # do not run anything on push commit to master branch, tests and linters have already executed on develop branch
  - if: $CI_COMMIT_BRANCH =~ /^(master|main)$/
    when: never
  - when: always

### --------------- Get VAULT SECRET --------------- ###
## Переиспользование добавленного template'а по добавлению SSH-ключа пользователя ansible. ##
devops_get_cicd_secrets:
  extends: .base_devops_get_cicd_secrets
  interruptible: true

# TODO: сделать в отдельной задаче
#pre-commit:
#  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
#  variables:
#    PYTHON_VERSION: '3.7'
#  stage: pre-commit
#  script:
#  - yum install -y git
#  - pip install pre-commit
#  - pre-commit run --all-files

mypy:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: static analysis
  script:
  - pip install mypy
  - python3 -m mypy --config-file setup.cfg evacuator
  interruptible: true

flake8:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: static analysis
  script:
  - pip install wemake-python-styleguide
  - python3 -m flake8 --format=default . 2>&1 | tee flake8.txt
  artifacts:
    when: always
    paths: [flake8.txt]
  rules:
  # do not run linters after pushing git tag, code was already linted
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success
  interruptible: true

black:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: static analysis
  script:
  - pip install black
  - python3 -m black . --check
  rules:
  # do not run linters after pushing git tag, code was already linted
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success
  interruptible: true

tests:
  image: ${CI_REGISTRY}/platform/python:${PYTHON_VERSION}
  stage: tests
  variables:
    PYTHON_VERSION: '3.7'
    # Test results files
    COVERAGE_FILE: coverage.xml
    JUNIT_FILE: junitxml.xml
  rules:
  # do not run tests after pushing git tag, code was already tested
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success
  script:
  - pip install -r requirements-test.txt
  - PYTHONPATH=. pytest tests --cov-append --cov=evacuator --cov-config=tests/.coveragerc --cov-report=xml:${COVERAGE_FILE} --junitxml=${JUNIT_FILE}
  after_script:
  - sed -i s$'$CI_PROJECT_DIR/evacuator'$'evacuator'$ coverage.xml
  artifacts:
    when: always
    paths:
    - coverage.xml
    reports:
      junit:
      - junitxml.xml
      cobertura:
      - coverage.xml
  interruptible: true

build_and_deploy:
  extends: .base_pip_pkg_build_and_deploy_to_jfrog
  stage: artifactory
  variables:
    PYTHON_VERSION: '3.7'
  interruptible: true

# TODO: rewrite for versions before release
build_docs:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: build_docs
  before_script:
  - export VERSION=$(python setup.py --version)
  - echo "VERSION=$VERSION" >> deploy.env
  script:
  - pip install -r requirements-docs.txt
  - cd docs
  - make html
  - tar cvzf html-${VERSION}.tar.gz -C _build/html .
  - >
    if [ "$CI_COMMIT_TAG" != "" ];
    then cp html-${VERSION}.tar.gz html-latest.tar.gz;
    fi
  artifacts:
    paths:
    - docs/html-*.tar.gz
    reports:
      dotenv: deploy.env
  interruptible: true

publish_docs:
  extends: .base_rt_upload
  stage: artifactory
  variables:
    JFROG_RT_ARTIFACTS_PATTERN: docs/html-*.tar.gz
    JFROG_RT_UPLOAD_PATH: files/everproject/evacuator/
  dependencies:
  - build_docs
  - devops_get_cicd_secrets
  interruptible: true

### --------------- DEPLOY --------------- ###
pages:
  extends: .base_pages_deploy_sphinx
  stage: deploy
  variables:
    CICD_PAGES_ARTIFACTORY_DOCS_PATH: files/everproject/${CI_PROJECT_NAME}/docs
  interruptible: true

start_environment_pip:
  stage: .post
  dependencies:
  - build_docs
  environment:
    name: docs/$CI_COMMIT_REF_SLUG
    url: ${CI_PAGES_URL}/${VERSION}/
    on_stop: stop_environment_pip
  script:
  - echo "Start docs"
  rules:
  # environment is used to remove artifacts build in feature/ and bugfix/ branches only
  # dev and release packages are left intact
  - if: $CI_COMMIT_BRANCH =~ /^(dev|develop)$/
    when: never
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success

stop_environment_pip:
  extends: .base_rt_cli
  stage: .post
  script:
    # Remove artifacts for feature/bug branch
  - export CI_COMMIT_REF_SLUG=$(echo $CI_COMMIT_REF_SLUG | tr '-' '.')
  - jfrog rt delete files/everproject/evacuator/docs/*+${CI_COMMIT_REF_SLUG}*
  - jfrog rt delete pypi-local/evacuator/*+${CI_COMMIT_REF_SLUG}
  environment:
    name: docs/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
  # environment is used to remove artifacts build in feature/ and bugfix/ branches only
  # dev and release packages are left intact
  - if: $CI_COMMIT_BRANCH =~ /^(dev|develop)$/
    when: never
  - if: $CI_COMMIT_TAG
    when: never
  - when: manual
    allow_failure: true
